// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2024 20:26:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    displayController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module displayController_vlg_sample_tst(
	GClock,
	GReset,
	leftSig,
	rightSig,
	sampler_tx
);
input  GClock;
input  GReset;
input  leftSig;
input  rightSig;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or leftSig or rightSig)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module displayController_vlg_check_tst (
	DisplayOut,
	sampler_rx
);
input [7:0] DisplayOut;
input sampler_rx;

reg [7:0] DisplayOut_expected;

reg [7:0] DisplayOut_prev;

reg [7:0] DisplayOut_expected_prev;

reg [7:0] last_DisplayOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DisplayOut_prev = DisplayOut;
end

// update expected /o prevs

always @(trigger)
begin
	DisplayOut_expected_prev = DisplayOut_expected;
end


// expected DisplayOut[ 7 ]
initial
begin
	DisplayOut_expected[7] = 1'bX;
end 
// expected DisplayOut[ 6 ]
initial
begin
	DisplayOut_expected[6] = 1'bX;
end 
// expected DisplayOut[ 5 ]
initial
begin
	DisplayOut_expected[5] = 1'bX;
end 
// expected DisplayOut[ 4 ]
initial
begin
	DisplayOut_expected[4] = 1'bX;
end 
// expected DisplayOut[ 3 ]
initial
begin
	DisplayOut_expected[3] = 1'bX;
end 
// expected DisplayOut[ 2 ]
initial
begin
	DisplayOut_expected[2] = 1'bX;
end 
// expected DisplayOut[ 1 ]
initial
begin
	DisplayOut_expected[1] = 1'bX;
end 
// expected DisplayOut[ 0 ]
initial
begin
	DisplayOut_expected[0] = 1'bX;
end 
// generate trigger
always @(DisplayOut_expected or DisplayOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DisplayOut = %b | ",DisplayOut_expected_prev);
	$display("| real DisplayOut = %b | ",DisplayOut_prev);
`endif
	if (
		( DisplayOut_expected_prev[0] !== 1'bx ) && ( DisplayOut_prev[0] !== DisplayOut_expected_prev[0] )
		&& ((DisplayOut_expected_prev[0] !== last_DisplayOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[0] = DisplayOut_expected_prev[0];
	end
	if (
		( DisplayOut_expected_prev[1] !== 1'bx ) && ( DisplayOut_prev[1] !== DisplayOut_expected_prev[1] )
		&& ((DisplayOut_expected_prev[1] !== last_DisplayOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[1] = DisplayOut_expected_prev[1];
	end
	if (
		( DisplayOut_expected_prev[2] !== 1'bx ) && ( DisplayOut_prev[2] !== DisplayOut_expected_prev[2] )
		&& ((DisplayOut_expected_prev[2] !== last_DisplayOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[2] = DisplayOut_expected_prev[2];
	end
	if (
		( DisplayOut_expected_prev[3] !== 1'bx ) && ( DisplayOut_prev[3] !== DisplayOut_expected_prev[3] )
		&& ((DisplayOut_expected_prev[3] !== last_DisplayOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[3] = DisplayOut_expected_prev[3];
	end
	if (
		( DisplayOut_expected_prev[4] !== 1'bx ) && ( DisplayOut_prev[4] !== DisplayOut_expected_prev[4] )
		&& ((DisplayOut_expected_prev[4] !== last_DisplayOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[4] = DisplayOut_expected_prev[4];
	end
	if (
		( DisplayOut_expected_prev[5] !== 1'bx ) && ( DisplayOut_prev[5] !== DisplayOut_expected_prev[5] )
		&& ((DisplayOut_expected_prev[5] !== last_DisplayOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[5] = DisplayOut_expected_prev[5];
	end
	if (
		( DisplayOut_expected_prev[6] !== 1'bx ) && ( DisplayOut_prev[6] !== DisplayOut_expected_prev[6] )
		&& ((DisplayOut_expected_prev[6] !== last_DisplayOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[6] = DisplayOut_expected_prev[6];
	end
	if (
		( DisplayOut_expected_prev[7] !== 1'bx ) && ( DisplayOut_prev[7] !== DisplayOut_expected_prev[7] )
		&& ((DisplayOut_expected_prev[7] !== last_DisplayOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DisplayOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DisplayOut_expected_prev);
		$display ("     Real value = %b", DisplayOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DisplayOut_exp[7] = DisplayOut_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module displayController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg leftSig;
reg rightSig;
// wires                                               
wire [7:0] DisplayOut;

wire sampler;                             

// assign statements (if any)                          
displayController i1 (
// port map - connection between master ports and signals/registers   
	.DisplayOut(DisplayOut),
	.GClock(GClock),
	.GReset(GReset),
	.leftSig(leftSig),
	.rightSig(rightSig)
);

// GClock
always
begin
	GClock = 1'b0;
	GClock = #50000 1'b1;
	#50000;
end 

// GReset
initial
begin
	GReset = 1'b1;
	GReset = #100000 1'b0;
end 

// leftSig
initial
begin
	leftSig = 1'b0;
	leftSig = #100000 1'b1;
end 

// rightSig
initial
begin
	rightSig = 1'b0;
	rightSig = #100000 1'b1;
end 

displayController_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.leftSig(leftSig),
	.rightSig(rightSig),
	.sampler_tx(sampler)
);

displayController_vlg_check_tst tb_out(
	.DisplayOut(DisplayOut),
	.sampler_rx(sampler)
);
endmodule

